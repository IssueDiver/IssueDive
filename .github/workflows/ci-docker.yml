# 워크플로우의 이름
name: IssueDive CI

# 워크플로우가 언제 실행될지 정의
on:
  push:
    branches: [ "dev" ] # dev 브랜치에 push될 때 실행
  pull_request:
    branches: [ "dev" ] # dev 브랜치로 Pull Request가 생성될 때 실행

# 실행될 작업(Job)들을 정의
jobs:
  build-and-test: # 작업의 ID
    name: Build and Test # 작업의 이름 (GitHub Actions UI에 표시됨)
    runs-on: ubuntu-latest # 작업을 실행할 가상 머신 환경 (Ubuntu 최신 버전)

    # 작업의 단계(Step)들을 정의
    steps:
      # 1. 소스 코드 체크아웃
      # GitHub Actions Runner가 우리 저장소의 코드에 접근할 수 있도록 내려받는 단계
      - name: Checkout source code
        uses: actions/checkout@v4

      # 2. Docker Buildx 설정
      # Docker 빌드 성능을 향상시키고 다양한 빌드 기능을 활성화하는 단계
      - name: Set up Docker Buildx
        uses: docker/setup-build-action@v2
        
      # 3. Docker 이미지 빌드
      # Dockerfile을 기반으로 애플리케이션을 빌드하여 Docker 이미지를 생성.
      # 이 단계에서 Gradle 빌드가 컨테이너 안에서 먼저 실행됨.
      - name: Build Docker image
        # GitHub Secrets를 환경 변수로 설정하고,
        # docker build 명령어에 --build-arg로 전달합니다.
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          docker build -t issue-dive-app \
            --build-arg DB_URL="$DB_URL" \
            --build-arg DB_USER="$DB_USER" \
            --build-arg DB_PASSWORD="$DB_PASSWORD" \
            .
            
      # 4. Docker 컨테이너 안에서 테스트 실행
      # 바로 위에서 성공적으로 빌드된 Docker 이미지를 실행하여,
      # 그 안에서 Gradle 테스트를 실행. 빌드와 테스트 단계를 분리하여 명확성을 높임.
      - name: Run tests inside Docker container
        run: |
          docker run --rm issue-dive-app ./gradlew test

# --- 이전 방식 (더 이상 필요 없음) ---
# 이제 모든 빌드와 테스트가 Docker 컨테이너 안에서 이루어지므로,
# GitHub Actions Runner에 직접 Java를 설치하거나 gradlew에 실행 권한을 줄 필요가 없습니다.
#       # 2. JDK 17 설치
#       - name: Set up JDK 17
#         uses: actions/setup-java@v4
#         with:
#           java-version: '17'
#           distribution: 'temurin'

#       # 3. gradlew 파일에 실행 권한 부여
#       - name: Grant execute permission for gradlew
#         run: chmod +x ./gradlew

#       # 4. Gradle로 빌드 및 테스트 실행
#       - name: Build with Gradle
#         run: ./gradlew build --no-daemon