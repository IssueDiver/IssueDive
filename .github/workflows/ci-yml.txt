# 워크플로우의 이름
name: IssueDive CI

# 워크플로우가 언제 실행될지 정의
on:
  push:
    branches: [ "dev" ] # dev 브랜치에 push될 때 실행
  pull_request:
    branches: [ "dev" ] # dev 브랜치로 Pull Request가 생성될 때 실행

# 실행될 작업(Job)들을 정의
jobs:
  build-and-test: # 작업의 ID
    name: Build and Test # 작업의 이름 (GitHub Actions UI에 표시됨)
    runs-on: ubuntu-latest # 작업을 실행할 가상 머신 환경 (Ubuntu 최신 버전)

    # 작업의 단계(Step)들을 정의
    steps:
      # 1. 소스 코드 체크아웃
      # GitHub Actions가 우리 저장소의 코드에 접근할 수 있도록 내려받는 단계
      - name: Checkout source code
        uses: actions/checkout@v4

      # 2. JDK 17 설치
      # build.gradle에 설정된 Java 17 버전으로 빌드 환경을 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. gradlew 파일에 실행 권한 부여
      # 예전에 겪었던 'permission denied' 문제를 방지하기 위해 꼭 필요!
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 4. Gradle로 빌드 및 테스트 실행
      # 이 명령어가 성공하면 CI 성공, 실패하면 CI 실패
      - name: Build with Gradle
        run: ./gradlew build